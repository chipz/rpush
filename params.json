{"name":"rpush","body":"Python wrapper used to push notification to several web service\r\n\r\nCurrently support for:\r\n\r\n * RIM (Blackberry)\r\n * C2DM (Android)\r\n\r\nPlanning to support, [see to do]\r\nSince notification can work as background job, you can use rpush as job queue via jobseeker.\r\n\r\nWhat you need it is a Redis server (ver 2.4 using in development)\r\nAlso Need:\r\n\r\n * python redis\r\n * python web.py [optional]\r\n * python mako [optional]\r\n \r\nUsing python multiprocess to handle parallel job\r\n\r\n### Feature\r\n * Modular (easy to separate jobs, via config use_module)\r\n\r\n### How To Use\r\n\r\n##### Using rpush as library\r\n\r\n```\r\n>>> import rpush\r\n>>> # push to android c2dm\r\n>>> c2dm = rpush.android.Android(app_email=[APP-EMAIL], app_email_password=[APP-EMAIL-PASSWORD])\r\n>>> c2dm.push(registration_id=[REG-ID], collapse_key=None, data={\"message\": \"Hi Citra!\"}, delay_while_idle=True)\r\n>>> # push to blackberry\r\n>>> pushapi = rpush.blackberry.Blackberry([APP-ID], [APP-PASSWORD], [APP-PUSH-URL])\r\n>>> pushapi.push(pins=[12345678], message=\"Hi again Citra!\")\r\n```\r\n\r\n##### Using jobseeker as Message Queue with rpush\r\n\r\nCreate dummy config.ini file\r\n\r\n```\r\n[main]\r\n#redis\r\nhost=localhost\r\nport=6379\r\ndb=0\r\n\r\n# max error log stored in redis\r\nmax_log=3\r\n    \r\n# max retry job failed\r\nmax_retry=2\r\n# worker number, multiprocess\r\nworker=1\r\n# separated by space\r\nuse_module=blackberry android\r\n\r\n[android]\r\napp_email = [YOUR-EMAIL-ADDRESS]\r\napp_email_password = [YOUR-EMAIL-PASSWORD]\r\napp_source = [COMPANY-APPLICATION-VERSION]\r\n\r\n[blackberry]\r\napp_id = [YOUR-APP-ID]\r\napp_password = [YOUR-APP-PASSWORD]\r\napp_push_url = https://pushapi.eval.blackberry.com/mss/PD_pushRequest\r\n```    \r\n \r\nStart worker\r\n\r\n```\r\n$ cd /path/to/rpush\r\n$ python main.py config.ini\r\n```\r\n    \r\nEasily send job queue via redis rpush method\r\n\r\n```\r\n$ redis-cli\r\n$ > rpush jobs:android \"{\\\"registration_id\\\": \\\"REG_ID\\\", \\\"collapse_key\\\": 123, \\\"data\\\": {\\\"message\\\": \\\"Hi citra!\\\"}}\"\r\n$ > rpush jobs:blackberry \"{\\\"pins\\\": [\\\"12345678\\\"], \\\"message\\\": \\\"Hello again citra!\\\"}\"\r\n```\r\n    \r\nEasily monitoring log via redis-cli\r\n\r\n```\r\n$ redis-cli\r\n$ # get latest failed job log and also the traceback\r\n$ > lrange failed:job 0 1\r\n$ # get latest sucess job log\r\n$ > lrange success:job 0 1\r\n$ # get job queue length, (blackberry push for example)\r\n$ > llen jobs:blackberry\r\n$ # see list of worker\r\n$ > HKEYS worker:info\r\n$ # see how many job has been worked by worker\r\n$ > GET worker:info [worker-id]\r\n$ # see how many job has been worked and failed by worker\r\n$ > GET worker:info:failed [worker-id]\r\n$ # see if your code already send wrong opcode/message\r\n$ > LRANGE invalid:message 0 100\r\n$ # see if your code already send wrong type\r\n$ > LRANGE invalid-type 0 100\r\n```\r\n\r\nAlso you can easily monitoring job log via web interface,\r\nto run weblog you need install web.py and mako template engine.\r\n\r\n```\r\n$ sudo pip install web.py\r\n$ sudo pip install Mako\r\n```\r\n\r\nOr easily via setup.py:\r\n\r\n```\r\n$ cd /path/to/rpush\r\n$ sudo python setup.py develop\r\n```\r\n\r\nRun web log, specify port in args 2, default 8080\r\n\r\n```\r\n$ python weblog/weblog.py 13000\r\n```\r\n\r\nAnd open http://localhost:13000\r\n\r\n### Notes\r\n * You need to implicit your plugin library in rpush/__init__.py if you want to use your own library.\r\n\r\n### TODO\r\n * complete weblog, support for modular report\r\n * easily launch new worker without dirty hand into console\r\n * support Apple APNS\r\n * support NGINX Push Stream Module\r\n * support Windows Mobile\r\n \r\n### Bug Reports\r\nSend your bug report, suggestion to rizky@abdi.la\r\n\r\n### Credits\r\n * Nicholas Brochu [@nbrochu], who originally write the library blackberry push in ruby\r\n","tagline":"Push Notification to RIM, C2DM, APNS and WPNS","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}